{"version":3,"sources":["services/api.js","components/add-edit-modal/add-edit-todo-component.jsx","components/confirmation-modal/confirmation-modal.component.jsx","components/loader/loader.component.jsx","components/search-todo/search-todo.component.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","AddEditTodoModal","isVisible","mode","closeModal","props","handleChange","handleCheckbox","addTodo","editTodo","payload","Modal","size","show","onHide","aria-labelledby","Header","closeButton","Title","id","Body","className","htmlFor","type","name","value","title","onChange","event","required","defaultChecked","completed","onClick","Footer","Button","variant","ConfirmationModal","handleOk","Loader","isLoading","library","add","faSearch","SearchTodo","placeholder","e","aria-label","aria-describedby","icon","faPen","faTrash","faPlus","faCheckSquare","App","state","todos","modalMode","isModalVisible","isConfirmationModalVisible","searchField","handleTodoSearch","setState","target","checked","newTodo","Math","floor","random","userId","undefined","API","post","then","response","tempTodos","data","window","alert","foundIndex","findIndex","item","put","deleteTodo","filter","delete","console","log","completedTodo","patch","openModal","openConfirmationModal","closeConfirmationModal","get","slice","this","refreshTodos","filteredTodo","todo","toLowerCase","includes","map","index","key","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b00c92e8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: `https://jsonplaceholder.typicode.com`\r\n});","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './add-edit-todo.component.css';\r\n\r\nconst AddEditTodoModal = ({isVisible, mode, closeModal, ...props}) => { \r\n    const { handleChange, handleCheckbox, addTodo, editTodo, payload } = props;    \r\n    return (\r\n        <div>\r\n            <Modal\r\n                size=\"lg\"\r\n                show={isVisible}\r\n                onHide={() => closeModal(isVisible)}\r\n                aria-labelledby=\"example-modal-sizes-title-lg\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                        { mode === 'ADD' ? 'Add Todo' : 'Edit Todo' } \r\n                    </Modal.Title>\r\n                </Modal.Header>                \r\n                <Modal.Body>\r\n                    <div className=\"form-group row\">\r\n                        <label htmlFor=\"inputTodoTitle\" className=\"col-sm-2 col-form-label\">Title</label>\r\n                        <div className=\"col-sm-10\">\r\n                            <input type=\"text\" name=\"title\" value={payload.title} onChange={(event) => handleChange(event)} className=\"form-control\" id=\"inputTodoTitle\" required/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <div className=\"col-sm-2\">Status</div>\r\n                        <div className=\"col-sm-10\">\r\n                            <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" name=\"isTodoCompleted\" defaultChecked={payload.completed} onClick={(event) => handleCheckbox(event)} type=\"checkbox\" id=\"todoCompletedCheckbox\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"todoCompletedCheckbox\">\r\n                                Mark as completed todo \r\n                            </label>\r\n                            </div>\r\n                        </div>\r\n                    </div>              \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-dark\" onClick={() => closeModal(isVisible)}>Close</Button>\r\n                    {\r\n                        mode === 'ADD' ? (<Button variant=\"outline-primary\" onClick={() => addTodo()}>Add Todo</Button>) : (<Button variant=\"outline-primary\" onClick={() => editTodo(payload)}>Update Todo</Button>) \r\n                    }                    \r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddEditTodoModal;\r\n","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './confirmation-modal.component.css';\r\n\r\nconst ConfirmationModal = ({isVisible, closeModal, handleOk, payload}) => {\r\n    return (\r\n        <div>\r\n            <Modal\r\n            size=\"lg\"\r\n            show={isVisible}\r\n            onHide={() => closeModal(isVisible)}\r\n            className=\"confirmation-modal\"\r\n            aria-labelledby=\"confirmation-modal-title\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"confirmation-modal-title\">\r\n                        Confirmation \r\n                    </Modal.Title>\r\n                </Modal.Header>                \r\n                <Modal.Body>\r\n                   <p>Are you sure you want to delete the record!</p>             \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-dark\" onClick={() => closeModal(isVisible)}>No</Button>\r\n                    <Button variant=\"outline-primary\" onClick={() => handleOk(payload.id)}>Yes</Button>                                    \r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmationModal;\r\n","import React from 'react';\r\nimport './loader.component.css';\r\n\r\nconst Loader = ({isLoading}) => {\r\n    return (\r\n        isLoading ? (<div className=\"overlay\">\r\n                <div className=\"lds-facebook\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>) : null\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {faSearch} from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nlibrary.add(faSearch);\r\n\r\nconst SearchTodo = ({handleChange, placeholder}) => {\r\n    return (\r\n        <div className=\"input-group\">\r\n            <input type=\"text\" className=\"form-control\" name=\"searchTodo\" onChange={(e) => handleChange(e)} placeholder={placeholder} aria-label=\"search todo\" aria-describedby=\"basic-addon2\" />\r\n            <div className=\"input-group-append\">\r\n            <span className=\"input-group-text\" id=\"basic-addon2\"><FontAwesomeIcon icon=\"search\"/></span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchTodo;\r\n","import React, { Component } from 'react';\n\n// API Services\nimport API from './services/api';\n// import data from './services/todos.json';\n\n// components\nimport AddEditTodoModal from './components/add-edit-modal/add-edit-todo-component';\nimport ConfirmationModal from './components/confirmation-modal/confirmation-modal.component';\nimport Loader from './components/loader/loader.component';\nimport SearchTodo from './components/search-todo/search-todo.component';\n\n// font-awesome settings \nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPen, faTrash, faPlus, faCheckSquare, faSearch} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nlibrary.add(faPen, faTrash, faPlus, faCheckSquare, faSearch);\n\n\n\n\nexport class App extends Component {\n\n  state = {\n    todos: [],\n    modalMode: null,\n    isModalVisible: false,\n    payload: {\n      title: '',\n      completed: false\n    },\n    isConfirmationModalVisible: false,\n    isLoading: true,\n    searchField:''\n  };\n\n\n  handleTodoSearch = (e) => {\n    this.setState({\n      ...this.state,\n      searchField: e.target.value\n    });\n  }\n\n  handleChange = e => {    \n    this.setState({\n      payload:{\n        ...this.state.payload,\n        title: e.target.value\n      } \n    });\n  }\n\n  handleCheckbox = e => {    \n    this.setState({      \n      payload:{\n        ...this.state.payload,\n        completed: e.target.checked\n      } \n    });\n  }\n  \n  addTodo = () => {\n    const { payload, isModalVisible } = this.state;\n    const newTodo = {...payload, id: Math.floor(1000 + Math.random() * 9000), userId:1};\n\n    // to validate input field\n    if(payload.title !== undefined && payload.title !== '') {\n      // to show loader while adding the data\n      this.setState({isLoading: true});\n      \n      // add todo API call\n      API.post(`/todos`, newTodo)\n      .then(response => {\n        const tempTodos = [response.data, ...this.state.todos]; \n        this.setState({ todos: tempTodos, isLoading: false});     \n      });\n\n      // to close todo modal\n      this.closeModal(isModalVisible);      \n      \n      // to reset add todo form feilds\n      this.setState({\n        payload: {\n          title: '',\n          completed: false\n        }\n      });\n    } else {\n      window.alert('Title field can not be empty!');\n    }\n  }\n\n  editTodo = payload => {\n    const tempTodos = [...this.state.todos];\n    const { id } = payload;\n    let foundIndex = tempTodos.findIndex( item => item.id === id);\n\n     // to validate input field\n     if(payload.title !== undefined && payload.title !== '') {\n      this.setState({\n        isLoading: true\n      });\n      // edit todo API call\n      API.put(`/todos/${id}`, payload)\n      .then(response => {\n        tempTodos[foundIndex] = response.data;\n        // console.log('edit', response.data) \n        this.setState({\n          ...this.state,\n          todos: tempTodos,\n          isLoading:false\n        });    \n      });\n      this.closeModal(this.state.isModalVisible);\n    } else {\n      window.alert('Title field can not be empty!');\n    }\n  }\n\n  deleteTodo = id => {\n     const tempTodos = [...this.state.todos];\n     const todos = tempTodos.filter( item => item.id !== id );\n     this.setState({isLoading: true});\n          \n     API.delete(`/todos/${id}`)\n     .then(response => {\n       // console.log(response);\n       console.log(response.data);\n        this.setState({\n          ...this.state,\n          todos,\n          isLoading: false\n        });      \n    });\n  }\n\n  completedTodo = id => {\n    const tempTodos = [...this.state.todos];\n    const foundIndex = tempTodos.findIndex( item => item.id === id);\n    \n    this.setState({ isLoading : true });\n\n    // to update perticular key:value pair\n    API.patch(`/todos/${id}`, { completed : true })\n    .then(response => {\n      tempTodos[foundIndex] = response.data;\n      // console.log('edit', tempTodos[foundIndex]); \n      this.setState({\n        ...this.state,\n        todos: tempTodos,\n        isLoading: false\n      });       \n    });    \n  }\n\n  refreshTodos() {\n    API.get(`/todos`)\n    .then(response => {\n      // console.log(response);\n      // console.log(response.data.slice(0, 10));\n      this.setState({\n        todos: response.data.slice(0, 10),\n        isLoading: false\n      });\n    });\n  }\n\n  // add/edit todo modal\n  openModal = (isVisible, mode, payload) => {\n    if(mode === 'ADD') {\n      this.setState({\n        isModalVisible: isVisible,\n        modalMode: mode\n      }); \n    } else {\n      this.setState({\n        isModalVisible: isVisible,\n        modalMode: mode,\n        payload : payload\n      }); \n    }       \n  }\n\n  closeModal = isVisible => {\n    this.setState({isModalVisible: !isVisible});\n  } \n  \n  // confirmation cancel click\n  handleOk = (id) => {\n     this.deleteTodo(id);\n     this.setState({\n       isConfirmationModalVisible: false,\n       payload: {\n        title: '',\n        completed: false\n      }\n    });\n  }\n\n  openConfirmationModal = (isVisible, payload) => {\n    this.setState({\n      isConfirmationModalVisible: isVisible,\n      payload\n    });\n    // console.log(payload)\n  }\n  \n  closeConfirmationModal = isVisible => {\n    this.setState({isConfirmationModalVisible: !isVisible});\n  }   \n\n  componentDidMount() {\n    this.refreshTodos();\n  }\n\n  render() {\n    const { todos, searchField } = this.state;\n\n    const filteredTodo = todos.filter( todo => {\n      return todo.title.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-6\">\n            <h1 className=\"text-center mt-4 mb-3 pb-3 border-bottom\">Todo App</h1>\n          </div>\n        </div>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-6\">\n            <div className=\"row mb-3\">\n              <div className=\"col-6\">\n                <SearchTodo handleChange={this.handleTodoSearch} placeholder=\"Search Todo\"/>\n              </div>\n              <div className=\"col-6 text-right\">\n                <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => this.openModal(true, 'ADD', this.state.payload)}>\n                  <FontAwesomeIcon icon=\"plus\"/>  Add Todo\n                </button>\n              </div>\n            </div>\n\n            <ul className=\"list-group\">\n            {\n              filteredTodo.map( (todo, index) => {\n                return (\n                  <li className={`list-group-item ${todo.completed ? 'completed' :''}`} key={todo.id}>\n                    {`${todo.id}. ${todo.title}`}\n                    <span className=\"action-button\">  \n                      {\n                        !todo.completed ? (<FontAwesomeIcon icon=\"check-square\" onClick={() => this.completedTodo(todo.id)} /> ) : null\n                      }          \n                      <FontAwesomeIcon icon=\"pen\" onClick={() => this.openModal(true, 'EDIT', todo)}/>\n                      <FontAwesomeIcon icon=\"trash\" onClick={() => this.openConfirmationModal(true, todo)}/>\n                    </span>\n                  </li>\n                )\n              })\n            }\n            </ul>\n          </div>\n        </div>\n        \n        <AddEditTodoModal \n        isVisible={this.state.isModalVisible} \n        mode={this.state.modalMode} \n        closeModal={this.closeModal}\n        handleChange={this.handleChange}\n        handleCheckbox={this.handleCheckbox}\n        addTodo={this.addTodo}\n        editTodo={this.editTodo}\n        payload={this.state.payload}\n        />\n\n        <ConfirmationModal \n        isVisible={this.state.isConfirmationModalVisible}\n        closeModal={this.closeConfirmationModal}\n        handleOk={this.handleOk}\n        payload={this.state.payload}\n        />\n\n        <Loader isLoading={this.state.isLoading} />\n\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}